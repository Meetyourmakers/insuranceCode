package healthins;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author vitormgb
 */
public class calendarPanel extends javax.swing.JFrame {

    /**
     * Creates new form UserContent
     */
    public calendarPanel() {
        initComponents();
        setDefaultCloseOperation(RegisterFrame.DISPOSE_ON_CLOSE);
        getImages();
    }
    
    public static ArrayList<Calendar> readCalendarList(ArrayList <Calendar> calendar){
        try{
            InputStream file = new FileInputStream("calendar");
            InputStream buffer = new BufferedInputStream(file);
            File f = new File("calendar");
            if(f.length()!=0){
                try(ObjectInput input = new ObjectInputStream (buffer)) {
                    ArrayList<Calendar> recoveredCal = (ArrayList<Calendar>)input.readObject();
                    for(Calendar c: recoveredCal)
                       calendar.add(new Calendar(c.getDay(), c.getMonth(), c.getDescription(), c.getOwner()));
                }
            }
        }
        catch(ClassNotFoundException | IOException ex){
            return null;
        }
        return calendar;
    }
    
    public static Boolean saveCalendarList(ArrayList <Calendar> calendar){
        try {
            FileOutputStream fos = new FileOutputStream("calendar");
            try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(calendar);
            }
        }
        catch(IOException ex) {
            return false;
        }
        return true; 
    }

    private void getImages() {
        try {
            BufferedImage calendarIcon = ImageIO.read(new File("imgs/cal.png"));
            BufferedImage contactIcon = ImageIO.read(new File("imgs/cont.png"));
            BufferedImage formIcon = ImageIO.read(new File("imgs/serv.png"));
            BufferedImage historyIcon = ImageIO.read(new File("imgs/hist.png"));
            BufferedImage calcIcon = ImageIO.read(new File("imgs/calc.png"));

            JLabel calLabel = new JLabel(new ImageIcon(calendarIcon));
            JLabel contactLabel = new JLabel(new ImageIcon(contactIcon));
            JLabel formLabel = new JLabel(new ImageIcon(formIcon));
            JLabel histLabel = new JLabel(new ImageIcon(historyIcon));
            JLabel calcLabel = new JLabel(new ImageIcon(calcIcon));

            this.calendarPanel.add(calLabel);
            this.contactPanel.add(contactLabel);
            this.formPanel.add(formLabel);
            this.historyPanel.add(histLabel);
            this.calcPanel.add(calcLabel);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Unable to load images.");

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formPanel = new javax.swing.JTabbedPane();
        calendarPanel = new javax.swing.JTabbedPane();
        contactPanel = new javax.swing.JTabbedPane();
        historyPanel = new javax.swing.JTabbedPane();
        logoutButton = new javax.swing.JButton();
        calcPanel = new javax.swing.JTabbedPane();
        dayComboBox = new javax.swing.JComboBox();
        MonthComboBox = new javax.swing.JComboBox();
        loadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        loadAllButton = new javax.swing.JButton();
        monthButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        formPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formPanelMouseClicked(evt);
            }
        });

        calendarPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calendarPanelMouseClicked(evt);
            }
        });

        contactPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactPanelMouseClicked(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        calcPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calcPanelMouseClicked(evt);
            }
        });

        dayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayComboBoxActionPerformed(evt);
            }
        });

        MonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        loadButton.setText("Load");
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
        });
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        descriptionArea.setColumns(20);
        descriptionArea.setRows(5);
        descriptionArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descriptionAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(descriptionArea);

        saveButton.setText("Save");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        loadAllButton.setText("Load All");
        loadAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadAllButtonMouseClicked(evt);
            }
        });

        monthButton.setText("Month");
        monthButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calendarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(historyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calcPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 9, Short.MAX_VALUE)
                                .addComponent(logoutButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(monthButton)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(historyPanel)
                    .addComponent(contactPanel)
                    .addComponent(calendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(calcPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton)
                    .addComponent(loadAllButton)
                    .addComponent(monthButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logoutButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        this.dispose();
        this.setVisible(false);
        Login frame = new Login(Login.users);
        frame.setSize(400, 400);
        frame.setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void formPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formPanelMouseClicked
        this.dispose();
        this.setVisible(false);
        formPanel frame = new formPanel();
        frame.setVisible(true);
    }//GEN-LAST:event_formPanelMouseClicked

    private void calendarPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calendarPanelMouseClicked
        
    }//GEN-LAST:event_calendarPanelMouseClicked

    private void contactPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactPanelMouseClicked
        this.dispose();
        this.setVisible(false);
        contactPanel frame = new contactPanel();
        frame.setVisible(true);
    }//GEN-LAST:event_contactPanelMouseClicked

    private void calcPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calcPanelMouseClicked
        this.dispose();
        this.setVisible(false);
        calculatorPanel frame = new calculatorPanel();
        frame.setVisible(true);
    }//GEN-LAST:event_calcPanelMouseClicked

    private void dayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayComboBoxActionPerformed
       
    }//GEN-LAST:event_dayComboBoxActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        String month = (String) this.MonthComboBox.getSelectedItem();
        String day = (String) this.dayComboBox.getSelectedItem();
        String desc;
        if(checkDate(day,month)){
            if(!isScheduled(month,day)){
                try{
                    desc = this.descriptionArea.getText();
                    if(desc.length()!=0){
                        cal.add(new Calendar(day, month, desc, HealthIns.currentUsr.getId()));
                        saveCalendarList(cal);
                        JOptionPane.showMessageDialog(null,"Appointment added at "+day+"/"+month);
                        this.descriptionArea.setText("");
                    }
                    else
                        JOptionPane.showMessageDialog(null,"The text field is empty!"); 
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null,"The text field is empty!"); 
                }
            }
            else
                JOptionPane.showMessageDialog(null,"You already have scheduled appointments on "+day+"/"+month); 
        }
        else
            JOptionPane.showMessageDialog(null,"Invalid date format!"); 
    }//GEN-LAST:event_saveButtonMouseClicked

    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        String month = (String) this.MonthComboBox.getSelectedItem();
        String day = (String) this.dayComboBox.getSelectedItem();
        if(checkDate(day,month)){
            for(int i=0; i<cal.size(); i++){
                if(cal.get(i).getDay().equalsIgnoreCase(day) && cal.get(i).getMonth().equalsIgnoreCase(month) 
                        && cal.get(i).getOwner().equals(HealthIns.currentUsr.getId())){
                    this.descriptionArea.setText("Day\tMonth\n------------------------------------------------------------------\n");
                    this.descriptionArea.append(cal.get(i).getDay()+"\t"+cal.get(i).getMonth()+"\n\n"+cal.get(i).getDescription()+"\n");
                    this.descriptionArea.append("------------------------------------------------------------------\n");
                    break;
                }
            }
        }
        else
           JOptionPane.showMessageDialog(null,"Invalid date format!");  
    }//GEN-LAST:event_loadButtonMouseClicked

    private void loadAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadAllButtonMouseClicked
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        this.descriptionArea.setText("Day\tMonth\n------------------------------------------------------------------\n");
        for(int i=0; i<cal.size(); i++){
            this.descriptionArea.append(cal.get(i).getDay()+"\t"+cal.get(i).getMonth()+"\n\n"+cal.get(i).getDescription()+"\n");
            this.descriptionArea.append("------------------------------------------------------------------\n");
        }
    }//GEN-LAST:event_loadAllButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        boolean found = false;
        String month = (String) this.MonthComboBox.getSelectedItem();
        String day = (String) this.dayComboBox.getSelectedItem();
        if(checkDate(day,month)){
            for(int i=0; i<cal.size(); i++){
                if(cal.get(i).getDay().equalsIgnoreCase(day) && cal.get(i).getMonth().equalsIgnoreCase(month) 
                        && cal.get(i).getOwner().equals(HealthIns.currentUsr.getId())){
                    cal.remove(i);
                    saveCalendarList(cal);
                    JOptionPane.showMessageDialog(null,"Appointment deleted!");
                    this.descriptionArea.setText("");
                    found = true;
                    break;
                }
            }
        }
        else{
           JOptionPane.showMessageDialog(null,"Invalid date format!");  
        }
        if(!found)
            JOptionPane.showMessageDialog(null,"No appointments scheduled for this day.");
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void monthButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthButtonMouseClicked
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        String month = (String) this.MonthComboBox.getSelectedItem();
        if(!month.equalsIgnoreCase("month")){
            this.descriptionArea.setText("Appointments for the month of "+month+"\n------------------------------------------------------------------\n");
            for(int i=0; i<cal.size(); i++){
                if(cal.get(i).getMonth().equalsIgnoreCase(month) && cal.get(i).getOwner().equals(HealthIns.currentUsr.getId())){
                    this.descriptionArea.append("Day\t"+cal.get(i).getDay()+"\n\n"+cal.get(i).getDescription());
                    this.descriptionArea.append("\n------------------------------------------------------------------\n");
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null,"You must choose a month.");
    }//GEN-LAST:event_monthButtonMouseClicked

    private void descriptionAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionAreaMouseClicked
        this.descriptionArea.setText("");
    }//GEN-LAST:event_descriptionAreaMouseClicked
//JOptionPane.showMessageDialog(null,"Contact "); 
    private boolean checkDate(String day, String month){
        if(!day.equalsIgnoreCase("day")){
            int d = Integer.parseInt(day);
            if(month.equalsIgnoreCase("month") || day.equalsIgnoreCase("day"))
                return false;
            if (month.equals("February") && d>29)
                return false;
            else if(month.equals("April") || month.equals("June") || month.equals("September") || month.equals("November"))
                 return d != 31;
            return true;
        }
        else
            return false;
        
    }
    
    private boolean isScheduled(String month, String day){
        ArrayList<Calendar> cal = new ArrayList();
        cal = readCalendarList(cal);
        String currentUser = HealthIns.currentUsr.getId();
        for (int i=0; i<cal.size(); i++){
            if(cal.get(i).getDay().equals(day) && cal.get(i).getMonth().equals(month) 
                    && cal.get(i).getOwner().equals(currentUser))
                return true;
        }
        return false;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calendarPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new calendarPanel().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox MonthComboBox;
    private javax.swing.JTabbedPane calcPanel;
    private javax.swing.JTabbedPane calendarPanel;
    private javax.swing.JTabbedPane contactPanel;
    private javax.swing.JComboBox dayComboBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JTabbedPane formPanel;
    private javax.swing.JTabbedPane historyPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadAllButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton monthButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
