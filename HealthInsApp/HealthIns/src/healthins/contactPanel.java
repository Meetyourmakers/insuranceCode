package healthins;


import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


/**
 *
 * @author vitormgb
 */
public class contactPanel extends javax.swing.JFrame {

    /**
     * Creates new form UserContent
     */
    public contactPanel() {
        initComponents();
        setDefaultCloseOperation(RegisterFrame.DISPOSE_ON_CLOSE);
        getImages();
    }

    public static ArrayList<Contact> readContactList(ArrayList <Contact> contacts){
        try{
            InputStream file = new FileInputStream("contactList");
            InputStream buffer = new BufferedInputStream(file);
            File f = new File("contactList");
            if(f.length()!=0){
                try(ObjectInput input = new ObjectInputStream (buffer)) {
                    ArrayList<Contact> recoveredUsers = (ArrayList<Contact>)input.readObject();
                    for(Contact c: recoveredUsers)
                       contacts.add(new Contact(c.getName(), c.getMail(), c.getPhone(), c.getOwner()));
                }
            }
        }
        catch(ClassNotFoundException | IOException ex){
            return null;
        }
        return contacts;
    }
    
    public static Boolean saveContactList(ArrayList <Contact> contacts){
        try {
            FileOutputStream fos = new FileOutputStream("contactList");
            try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(contacts);
            }
        }
        catch(IOException ex) {
            return false;
        }
        return true; 
    }
    
    
    
    private void getImages() {
        try {
            BufferedImage calendarIcon = ImageIO.read(new File("imgs/cal.png"));
            BufferedImage contactIcon = ImageIO.read(new File("imgs/cont.png"));
            BufferedImage formIcon = ImageIO.read(new File("imgs/serv.png"));
            BufferedImage historyIcon = ImageIO.read(new File("imgs/hist.png"));
            BufferedImage calcIcon = ImageIO.read(new File("imgs/calc.png"));

            JLabel calLabel = new JLabel(new ImageIcon(calendarIcon));
            JLabel contactLabel = new JLabel(new ImageIcon(contactIcon));
            JLabel formLabel = new JLabel(new ImageIcon(formIcon));
            JLabel histLabel = new JLabel(new ImageIcon(historyIcon));
            JLabel calcLabel = new JLabel(new ImageIcon(calcIcon));

            this.calendarPanel.add(calLabel);
            this.contactPanel.add(contactLabel);
            this.formPanel.add(formLabel);
            this.historyPanel.add(histLabel);
            this.calcPanel.add(calcLabel);
            
            showContacts();
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Unable to load images.");

        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formPanel = new javax.swing.JTabbedPane();
        calendarPanel = new javax.swing.JTabbedPane();
        contactPanel = new javax.swing.JTabbedPane();
        historyPanel = new javax.swing.JTabbedPane();
        logoutButton = new javax.swing.JButton();
        addContactButton = new javax.swing.JButton();
        findContactButton = new javax.swing.JButton();
        calcPanel = new javax.swing.JTabbedPane();
        contactsTextArea = new java.awt.TextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        formPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formPanelMouseClicked(evt);
            }
        });

        calendarPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calendarPanelMouseClicked(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        addContactButton.setText("New Contact");
        addContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactButtonActionPerformed(evt);
            }
        });

        findContactButton.setText("Find Contact");
        findContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findContactButtonActionPerformed(evt);
            }
        });

        calcPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calcPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactsTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calendarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contactPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addContactButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(findContactButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(logoutButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(historyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calcPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(historyPanel)
                    .addComponent(contactPanel)
                    .addComponent(calendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(formPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(calcPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contactsTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoutButton)
                    .addComponent(addContactButton)
                    .addComponent(findContactButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        this.dispose();
        this.setVisible(false);
        Login frame = new Login(Login.users);
        frame.setSize(400, 400);
        frame.setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void formPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formPanelMouseClicked
        this.dispose();
        this.setVisible(false);
        formPanel frame = new formPanel();
        frame.setVisible(true);
    }//GEN-LAST:event_formPanelMouseClicked

    private void calendarPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calendarPanelMouseClicked

    }//GEN-LAST:event_calendarPanelMouseClicked

    private void findContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findContactButtonActionPerformed
        ArrayList<Contact> contacts = new ArrayList();
        contacts = readContactList(contacts);
        String ownerList = HealthIns.currentUsr.getId();
        Boolean flag = false;
        String searchValue = JOptionPane.showInputDialog("Insert the name of the contact: ");
        for(int i=0; i<contacts.size(); i++){
            if(contacts.get(i).getName().equals(searchValue) && contacts.get(i).getOwner().equals(ownerList)){
                contactsTextArea.setText("Contact found!\n");
                contactsTextArea.append("Name: "+contacts.get(i).getName()+"\n");
                contactsTextArea.append("E-Mail: "+contacts.get(i).getMail()+"\n");
                contactsTextArea.append("Phone: "+contacts.get(i).getPhone()+"\n\n");
                flag = true;
                break;
            }
        }
        if(!flag)
            contactsTextArea.setText("Contact named "+searchValue+" not found");
    }//GEN-LAST:event_findContactButtonActionPerformed

    private void addContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactButtonActionPerformed
        ArrayList<Contact> contacts = new ArrayList();
        boolean isEmpty = false;
        boolean flag = true;
        String ownerList = HealthIns.currentUsr.getId();
        contacts = readContactList(contacts);
        String name = JOptionPane.showInputDialog("New contact name: ");
        String mail = JOptionPane.showInputDialog("New contact mail: ");
        String phone = JOptionPane.showInputDialog("New contact phone: ");
        try{
            if(name.length()==0 || mail.length()==0 || phone.length()==0)
                isEmpty = true;
        }catch(Exception e){
            isEmpty = true;
        }
        if(!isEmpty){
            for(int i=0; i<contacts.size(); i++){
                if(contacts.get(i).getName().equals(name) && contacts.get(i).getOwner().equals(ownerList)){
                    flag = false;
                    break;
                }
            }
            if(flag){
                contacts.add(new Contact(name,mail,phone,HealthIns.currentUsr.getId()));
                JOptionPane.showMessageDialog(null,"Contact "+name+" added to your contact list!");
                saveContactList(contacts);
                showContacts();
            }
            else
                JOptionPane.showMessageDialog(null,"Contact "+name+" already is in your contact list!");
        }
        else
            JOptionPane.showMessageDialog(null,"None of the input field can be blank.");
    }//GEN-LAST:event_addContactButtonActionPerformed

    private void calcPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calcPanelMouseClicked
        this.dispose();
        this.setVisible(false);
        calculatorPanel frame = new calculatorPanel();
        frame.setVisible(true);
    }//GEN-LAST:event_calcPanelMouseClicked

    private void showContacts(){
        ArrayList<Contact> contacts = new ArrayList();
        contacts = readContactList(contacts);
        String ownerList = HealthIns.currentUsr.getId();
        contactsTextArea.setText("Your contact list\n\n");
        for(int i=0; i<contacts.size(); i++){
            if(contacts.get(i).getOwner().equals(ownerList)){
                contactsTextArea.append("Name: "+contacts.get(i).getName()+"\n");
                contactsTextArea.append("E-Mail: "+contacts.get(i).getMail()+"\n");
                contactsTextArea.append("Phone: "+contacts.get(i).getPhone()+"\n\n");
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(contactPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new contactPanel().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContactButton;
    private javax.swing.JTabbedPane calcPanel;
    private javax.swing.JTabbedPane calendarPanel;
    private javax.swing.JTabbedPane contactPanel;
    private java.awt.TextArea contactsTextArea;
    private javax.swing.JButton findContactButton;
    private javax.swing.JTabbedPane formPanel;
    private javax.swing.JTabbedPane historyPanel;
    private javax.swing.JButton logoutButton;
    // End of variables declaration//GEN-END:variables
}
